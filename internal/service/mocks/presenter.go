// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockPresenter creates a new instance of MockPresenter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPresenter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPresenter {
	mock := &MockPresenter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPresenter is an autogenerated mock type for the Presenter type
type MockPresenter struct {
	mock.Mock
}

type MockPresenter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPresenter) EXPECT() *MockPresenter_Expecter {
	return &MockPresenter_Expecter{mock: &_m.Mock}
}

// Present provides a mock function for the type MockPresenter
func (_mock *MockPresenter) Present(strings []string) error {
	ret := _mock.Called(strings)

	if len(ret) == 0 {
		panic("no return value specified for Present")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]string) error); ok {
		r0 = returnFunc(strings)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPresenter_Present_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Present'
type MockPresenter_Present_Call struct {
	*mock.Call
}

// Present is a helper method to define mock.On call
//   - strings
func (_e *MockPresenter_Expecter) Present(strings interface{}) *MockPresenter_Present_Call {
	return &MockPresenter_Present_Call{Call: _e.mock.On("Present", strings)}
}

func (_c *MockPresenter_Present_Call) Run(run func(strings []string)) *MockPresenter_Present_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockPresenter_Present_Call) Return(err error) *MockPresenter_Present_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPresenter_Present_Call) RunAndReturn(run func(strings []string) error) *MockPresenter_Present_Call {
	_c.Call.Return(run)
	return _c
}
