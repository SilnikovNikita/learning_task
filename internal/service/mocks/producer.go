// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify


package service

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockProducer creates a new instance of MockProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProducer {
	mock := &MockProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProducer is an autogenerated mock type for the Producer type
type MockProducer struct {
	mock.Mock
}

type MockProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProducer) EXPECT() *MockProducer_Expecter {
	return &MockProducer_Expecter{mock: &_m.Mock}
}

// Produce provides a mock function for the type MockProducer
func (_mock *MockProducer) Produce() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Produce")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProducer_Produce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Produce'
type MockProducer_Produce_Call struct {
	*mock.Call
}

// Produce is a helper method to define mock.On call
func (_e *MockProducer_Expecter) Produce() *MockProducer_Produce_Call {
	return &MockProducer_Produce_Call{Call: _e.mock.On("Produce")}
}

func (_c *MockProducer_Produce_Call) Run(run func()) *MockProducer_Produce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProducer_Produce_Call) Return(strings []string, err error) *MockProducer_Produce_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockProducer_Produce_Call) RunAndReturn(run func() ([]string, error)) *MockProducer_Produce_Call {
	_c.Call.Return(run)
	return _c
}
